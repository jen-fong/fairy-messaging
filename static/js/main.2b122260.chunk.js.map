{"version":3,"sources":["selectors/posts.js","utils/formatDate.js","components/MessageBoard/Post.js","components/MessageBoard/MessageBoard.js","constants.js","hooks/useForm.js","components/ViewPost/AddComment.js","components/ViewPost/ViewPost.js","actions/post.js","components/CreatePost/CreatePost.js","App.js","reducers/messageBoard.js","reducers/index.js","serviceWorker.js","index.js","createStore.js"],"names":["getPosts","state","Object","keys","messageBoard","postsById","map","postId","sort","a","b","createdAt","formatDate","date","separator","dateFormat","format","Post","post","onClick","formatedDate","Card","data-testid","id","className","Body","title","author","comments","length","size","MessageBoard","history","useHistory","posts","useSelector","handlePostClick","push","key","to","Button","variant","useForm","initialValues","onSubmit","React","useState","values","setValues","handleChange","e","target","name","value","handleSubmit","currentTimeAndDate","Date","preventDefault","uuidv4","AddComment","onAddComment","message","data","Form","Group","controlId","Label","Control","onChange","type","placeholder","required","as","rows","ViewPost","useParams","dispatch","useDispatch","comment","payload","addPostComment","CreatePost","App","path","initialState","combineReducers","action","produce","draft","Boolean","window","location","hostname","match","store","createStore","rootReducer","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.2b122260.chunk.js","sourcesContent":["export const getPosts = (state) => {\n  return Object.keys(state.messageBoard.postsById)\n    .map((postId) => state.messageBoard.postsById[postId])\n    .sort((a, b) => a.createdAt - b.createdAt);\n};\n","import format from \"date-fns/format\";\n\nexport function formatDate(date, separator = \" \") {\n  const dateFormat = `P${separator}p`;\n  return format(date, dateFormat);\n}\n","import React from \"react\";\nimport Card from \"react-bootstrap/Card\";\nimport { FaPlay } from \"react-icons/fa\";\nimport { formatDate } from \"../../utils\";\n\nexport function Post({ post, onClick }) {\n  const handleClick = () => onClick(post.id);\n  const formatedDate = formatDate(post.createdAt, \" @\");\n\n  return (\n    <Card\n      data-testid=\"messageBoardPost\"\n      onClick={handleClick}\n      className=\"mt-3 message-board-post\"\n    >\n      <Card.Body className=\"d-flex justify-content-between\">\n        <div className=\"message-board-post-content\">\n          <header>\n            <h4 className=\"message-board-post-title\">{post.title}</h4>\n          </header>\n\n          <span>Posted By: {post.author}</span>\n\n          <div className=\"d-flex\">\n            <span>{post.comments.length} Comments</span>\n            <span className=\"ml-auto mr-5\">Last Update: {formatedDate}</span>\n          </div>\n        </div>\n\n        <div className=\"text-black-50 mt-4\">\n          <FaPlay size={32} />\n        </div>\n      </Card.Body>\n    </Card>\n  );\n}\n","import React from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport Button from \"react-bootstrap/Button\";\nimport { getPosts } from \"../../selectors\";\nimport { Post } from \"./Post\";\n\nexport function MessageBoard() {\n  const history = useHistory();\n  const posts = useSelector(getPosts);\n\n  const handlePostClick = (postId) => {\n    history.push(`/posts/${postId}`);\n  };\n\n  return (\n    <section className=\"message-board\">\n      <header className=\"text-center\">\n        <h2>The Fairygodboss Message Board</h2>\n      </header>\n\n      <div className=\"message-board-posts\">\n        {!posts.length ? (\n          <div className=\"message-board-posts-none\">\n            There are currently no posts...add one!\n          </div>\n        ) : (\n          posts.map((post) => {\n            return <Post key={post.id} post={post} onClick={handlePostClick} />;\n          })\n        )}\n      </div>\n\n      <div className=\"d-flex flex-row-reverse mt-3\">\n        <Link to=\"/posts/create\">\n          <Button variant=\"primary\">Create New Post</Button>\n        </Link>\n      </div>\n    </section>\n  );\n}\n","export const ADD_POST_COMMENT = \"ADD_POST_COMMENT\";\nexport const ADD_POST = \"ADD_POST\";\n","import React from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nexport const useForm = ({ initialValues = {}, onSubmit }) => {\n  const [values, setValues] = React.useState(initialValues);\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n    setValues({\n      ...values,\n      [name]: value,\n    });\n  };\n\n  const handleSubmit = (e) => {\n    const currentTimeAndDate = new Date();\n\n    e.preventDefault();\n    onSubmit({\n      ...values,\n      id: uuidv4(),\n      createdAt: currentTimeAndDate,\n    });\n    // reset form state after submitting\n    setValues(initialValues);\n  };\n\n  return {\n    values,\n    handleChange,\n    handleSubmit,\n  };\n};\n","import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { useForm } from \"../../hooks\";\n\nexport function AddComment({ onAddComment }) {\n  const { values, handleSubmit, handleChange } = useForm({\n    initialValues: {\n      name: \"\",\n      message: \"\",\n    },\n    onSubmit: (data) => onAddComment(data),\n  });\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group controlId=\"commentName\">\n        <Form.Label>Reply Name</Form.Label>\n        <Form.Control\n          value={values.name}\n          name=\"name\"\n          onChange={handleChange}\n          type=\"text\"\n          placeholder=\"Enter name\"\n          required\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"commentMessage\">\n        <Form.Label>Reply Message</Form.Label>\n        <Form.Control\n          value={values.message}\n          name=\"message\"\n          onChange={handleChange}\n          placeholder=\"Enter message\"\n          as=\"textarea\"\n          rows=\"3\"\n          required\n        />\n      </Form.Group>\n\n      <div className=\"d-flex justify-content-end\">\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </div>\n    </Form>\n  );\n}\n","import React from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams, Link } from \"react-router-dom\";\nimport { formatDate } from \"../../utils\";\nimport { addPostComment } from \"../../actions/post\";\nimport { AddComment } from \"./AddComment\";\nimport Button from \"react-bootstrap/Button\";\n\nexport function ViewPost() {\n  const routeParams = useParams();\n  const { id } = routeParams;\n  const post = useSelector((state) => state.messageBoard.postsById[id]);\n  const formatedDate = formatDate(post.createdAt, \" \");\n\n  const dispatch = useDispatch();\n  const handleAddComment = (comment) => {\n    dispatch(\n      addPostComment({\n        id,\n        comment,\n      })\n    );\n  };\n\n  if (!post) {\n    return <section>Post not found</section>;\n  }\n\n  return (\n    <section className=\"view-post-container\">\n      <header className=\"d-flex\">\n        <div className=\"mr-auto\">\n          <h2 className=\"m-0\">{post.title}</h2>\n          <div>\n            By: {post.author} on {formatedDate}\n          </div>\n        </div>\n\n        <div className=\"mt-3\">\n          <Link to=\"/\">\n            <Button variant=\"secondary\">Back</Button>\n          </Link>\n        </div>\n      </header>\n      <div className=\"mt-3 view-post-message\">{post.message}</div>\n\n      <div className=\"view-post-comments\">\n        <h5>Responses</h5>\n        {!post.comments.length ? (\n          <div>\n            <p className=\"text-secondary\">There are no comments yet</p>\n          </div>\n        ) : (\n          post.comments.map((comment) => {\n            return (\n              <div className=\"ml-4 mr-4 pb- view-post-comment\" key={comment.id}>\n                <p className=\"font-weight-bold\">{comment.name}</p>\n                <p>{comment.message}</p>\n              </div>\n            );\n          })\n        )}\n      </div>\n\n      <div>\n        <AddComment onAddComment={handleAddComment} />\n      </div>\n    </section>\n  );\n}\n","import { ADD_POST_COMMENT, ADD_POST } from \"../constants\";\n\nexport const addPostComment = (comment) => {\n  return {\n    type: ADD_POST_COMMENT,\n    payload: comment,\n  };\n};\n\nexport const addPost = (post) => {\n  return {\n    type: ADD_POST,\n    payload: post,\n  };\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport Form from \"react-bootstrap/Form\";\nimport Button from \"react-bootstrap/Button\";\nimport { useForm } from \"../../hooks\";\nimport { addPost } from \"../../actions/post\";\n\nexport function CreatePost() {\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const { values, handleSubmit, handleChange } = useForm({\n    initialValues: {\n      title: \"\",\n      message: \"\",\n      author: \"\",\n    },\n    onSubmit: (data) => {\n      dispatch(addPost(data));\n      history.push(\"/\");\n    },\n  });\n\n  return (\n    <section>\n      <header className=\"text-center mb-4\">\n        <h2>Create a new post</h2>\n      </header>\n\n      <Form onSubmit={handleSubmit}>\n        <Form.Group controlId=\"postTitle\">\n          <Form.Label>Title</Form.Label>\n          <Form.Control\n            value={values.title}\n            name=\"title\"\n            onChange={handleChange}\n            type=\"text\"\n            placeholder=\"Enter title\"\n            required\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"postMessage\">\n          <Form.Label>Message</Form.Label>\n          <Form.Control\n            placeholder=\"Enter message\"\n            value={values.message}\n            name=\"message\"\n            onChange={handleChange}\n            as=\"textarea\"\n            rows=\"3\"\n            required\n          />\n        </Form.Group>\n\n        <Form.Group controlId=\"postAuthor\">\n          <Form.Label>Name</Form.Label>\n          <Form.Control\n            value={values.author}\n            onChange={handleChange}\n            name=\"author\"\n            type=\"text\"\n            placeholder=\"Enter your name\"\n            required\n          />\n        </Form.Group>\n\n        <div className=\"d-flex justify-content-end\">\n          <Link to=\"/\">\n            <Button className=\"mr-3\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </Link>\n\n          <Button variant=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </div>\n      </Form>\n    </section>\n  );\n}\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { MessageBoard } from \"./components/MessageBoard\";\nimport { ViewPost } from \"./components/ViewPost\";\nimport { CreatePost } from \"./components/CreatePost\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Switch>\n        <Route path=\"/posts/create\">\n          <CreatePost />\n        </Route>\n        <Route path=\"/posts/:id\">\n          <ViewPost />\n        </Route>\n        <Route path=\"/\">\n          <MessageBoard />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import produce from \"immer\";\nimport { ADD_POST_COMMENT, ADD_POST } from \"../constants\";\n\nexport const initialState = {\n  postsById: {\n    //   1: {\n    //     id: 1,\n    //     title: \"test post\",\n    //     author: \"jenny\",\n    //     message:\n    //       \"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\",\n    //     comments: [\n    //       {\n    //         id: 1,\n    //         name: \"cockatiel\",\n    //         message: \"hello my name is bird\",\n    //       },\n    //     ],\n    //     createdAt: new Date(\"2019-06-28\"),\n    //   },\n    //   2: {\n    //     id: 2,\n    //     title: \"test post 2\",\n    //     author: \"jenny\",\n    //     message:\n    //       \"Maecenas volutpat blandit aliquam etiam erat. Diam ut venenatis tellus in metus. Pharetra et ultrices neque ornare aenean euismod elementum nisi. Integer malesuada nunc vel risus commodo. Id diam vel quam elementum. Tempus iaculis urna id volutpat. Ut tellus elementum sagittis vitae et. Sed ullamcorper morbi tincidunt ornare massa eget. Diam sit amet nisl suscipit adipiscing bibendum est. Pellentesque diam volutpat commodo sed egestas. Nibh praesent tristique magna sit amet purus gravida. Mauris rhoncus aenean vel elit scelerisque mauris pellentesque pulvinar p\",\n    //     comments: [],\n    //     createdAt: new Date(\"2019-06-10\"),\n    //   },\n  },\n};\n\nexport const messageBoardReducer = (state = initialState, action) =>\n  produce(state, (draft) => {\n    switch (action.type) {\n      case ADD_POST_COMMENT:\n        const { id, comment } = action.payload;\n        const post = draft.postsById[id];\n        post.comments.push(comment);\n        break;\n\n      case ADD_POST:\n        const postId = action.payload.id;\n        draft.postsById[postId] = {\n          ...action.payload,\n          comments: [],\n        };\n        break;\n\n      default:\n        return draft;\n    }\n  });\n","import { combineReducers } from \"redux\";\nimport { messageBoardReducer } from \"./messageBoard\";\n\nexport default combineReducers({\n  messageBoard: messageBoardReducer,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport createStore from \"./createStore\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst store = createStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"./reducers\";\n\nexport default function createAppStore() {\n  const store = createStore(rootReducer, composeWithDevTools());\n\n  return store;\n}\n"],"sourceRoot":""}